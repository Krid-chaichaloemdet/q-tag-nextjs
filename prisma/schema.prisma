datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}
 
generator client {
  provider = "prisma-client-js"
}
 
enum UserRole {
  CUSTOMER
  PREPRESS
  PRODUCER
  DIE_CUTTER
  PACKER
  ACCOUNTANT
  ADMIN
  SUPER_ADMIN
  CHAIRMAN
}
enum MembershipTier {
  MEMBER_BRONZE
  MEMBER_SILVER
  MEMBER_GOLD
  NON_MEMBER
  MEMBER_RETAILER
}

enum UserStatus {
  ACTIVE
  INACTIVE
  BANNED
  SUSPECTED
  DELETED
}

model User {
  id            String          @id @default(cuid())
  name          String?
  password      String?
  email         String?         @unique
  emailVerified DateTime?
  role          UserRole   @default(CUSTOMER)
  memberType    MembershipTier @default(NON_MEMBER)
  active        UserStatus @default(ACTIVE)
  image         String?
  accounts      Account[]
  sessions      Session[]
  Authenticator Authenticator[]
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model Account {
  id                       String  @id @default(cuid())
  userId                   String  @unique
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  refresh_token_expires_in Int?
  user                     User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  @@unique([provider, providerAccountId])
  @@index([userId])
}
 
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  @@index([userId])
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
}
 
// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([userId, credentialID])
}

model Order {
  id  String @id @default(cuid())
  skuId    Int
  addressId Int
  priceCalculationId String
  userId   String
  orderStatus orderStatus @default(NEW_ORDER)
  deliveryMethod  DeliveryMethod
  promotionId Int?
  file   String?
  totalPrice Decimal
  quantity Int
  orderRemark String?
  prepressOwner  String?
  producerOwner String?
  dieCutterOwner String?
  packerOwner String?
  accountantOwner String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  queue Queue[]
}



enum DeliveryMethod {
  DELIVERY_EXPRESS
  DELIVERY_SELF_PICKUP
}


enum orderStatus {
  NEW_ORDER
  PAID_ORDER
  CHECKING_ORDER
  REJECTED_ORDER
  APPROVED_ORDER
  IN_QUEUE_ORDER
  IN_PRODUCTION_ORDER
  COMPLETED_PRODUCTION_ORDER
  IN_DIE_CUTTER_ORDER
  COMPLETED_DIE_CUTTING_ORDER
  IN_PACKING_ORDER
  COMPLETED_PACKING_ORDER
  IN_DELIVERING_ORDER
  DELIVERED_ORDER
}

model SKU {
  skuId   Int @id @default(autoincrement())
  skuName String
  material TypeOfMaterial
  coating  TypeOfCoating
  offsetOrSticker OffsetOrSticker
  quatityPerRollOrSheet QuantityPerRollOrSheet
  quantity Int
  unitPerPieceOrSet  UnitPerPieceOrSet
  size   String
  spacing   String
  roundedCorner String
}

enum TypeOfMaterial {
  MATERIAL1
  MATERIAL2
}
enum TypeOfCoating {
  GLOSSY_COATING
  MATTE_COATING
  UNCOATING
}
enum OffsetOrSticker {
  OFFSET
  STICKER
}
enum QuantityPerRollOrSheet {
  QUANMTITY_PER_UNIT
  QUANTITY_PER_SHEET
}
enum UnitPerPieceOrSet {
  PIECE
  SET
}


model Queue {
  queueId  Int @id @default(autoincrement())
  orderId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user Order @relation(fields: [orderId], references: [id], onDelete: Cascade)
}